# Usage:
#
# To build the images:
#   docker compose build
#
# To start up a specific service by name:
#   docker compose up <service_name>
#
# To open an interactive shell to a running container:
#   docker exec -it <container_name> bash

version: "3.9"
services:
  # Base image containing dependencies.
  ros1_node:
    # image: turtlebot3_behavior:base
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        ROS_DISTRO: noetic
        UID: ${UID:-1000}
        GID: ${UID:-1000}
        USERNAME: ${USERNAME}
        ROS_WS: ${ROS_WS}
      # target: base
    # Interactive shell
    stdin_open: true
    tty: true
    # Networking and IPC for ROS 1
    network_mode: host
    ipc: host
    # Needed to display graphical applications
    platform: linux/amd64
    privileged: True
    environment:
      # Allows graphical programs in the container.
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NVIDIA_DRIVER_CAPABILITIES=all
    volumes:
      # Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
      # Mount the source code
      - ./src:${ROS_WS}/src:rw
      # # Mount colcon build artifacts for faster rebuilds
      - ./.ros1/build/:${ROS_WS}/build/:rw
      - ./.ros1/devel/:${ROS_WS}/devel/:rw
        # [Optional] Required for ptrace-based debuggers like C++, Go, and Rust
    security_opt:
      - seccomp:unconfined
    # if running on real robots (real-time kernel)   
    ulimits:
      rtprio: 99
      rttime: -1
      memlock: 8428281856
    cap_add:
      - SYS_NICE


 
